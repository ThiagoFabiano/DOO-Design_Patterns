using System;
using System.Collections.Generic;
public class VisitorDemo
{
    public static void Main(string[] args)
    {
        Console.WriteLine("=== Demonstra√ß√£o do Padr√£o Visitor ===");
        
        var elements = new List<IElement>
        {
            new ElementA(),
            new ElementB(), 
            new ElementC()
        };
        
        Console.WriteLine("\n1. Valida√ß√£o dos elementos:");
        var validationVisitor = new ValidationVisitor();
        foreach (var element in elements)
        {
            element.Accept(validationVisitor);
            Console.WriteLine();
        }
        
        Console.WriteLine("2. Transforma√ß√£o dos elementos:");
        var transformVisitor = new TransformVisitor();
        foreach (var element in elements)
        {
            element.Accept(transformVisitor);
            Console.WriteLine();
        }
        
        Console.WriteLine("3. Exporta√ß√£o dos elementos (ap√≥s transforma√ß√£o):");
        var exportVisitor = new ExportVisitor();
        foreach (var element in elements)
        {
            element.Accept(exportVisitor);
            Console.WriteLine();
        }
        
        Console.WriteLine("4. Nova valida√ß√£o (com dados transformados):");
        var secondValidation = new ValidationVisitor();
        foreach (var element in elements)
        {
            element.Accept(secondValidation);
            Console.WriteLine();
        }
        
        Console.WriteLine("=== Vantagens do Visitor Pattern ===");
        Console.WriteLine("‚úÖ Adiciona opera√ß√µes sem modificar elementos");
        Console.WriteLine("‚úÖ Centraliza opera√ß√µes relacionadas em uma classe");
        Console.WriteLine("‚úÖ Facilita adicionar novos visitantes");
        Console.WriteLine("‚úÖ Separa algoritmo da estrutura de dados");
        Console.WriteLine("‚úÖ Usado em compiladores, analisadores, transforma√ß√µes");
        
        Console.WriteLine("\n=== Como funciona ===");
        Console.WriteLine("üîπ Elemento chama visitor.Visit(this)");
        Console.WriteLine("üîπ Visitor executa opera√ß√£o espec√≠fica do tipo");
        Console.WriteLine("üîπ Double dispatch: m√©todo correto √© escolhido");
        Console.WriteLine("üîπ Diferentes visitors = diferentes opera√ß√µes");
    }
}
