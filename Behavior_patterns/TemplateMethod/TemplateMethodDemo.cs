using System;

public class TemplateMethodDemo
{
    public static void Main(string[] args)
    {
        Console.WriteLine("=== Demonstra√ß√£o do Padr√£o Template Method ===");
        
        Console.WriteLine("\n1. Gerando relat√≥rio PDF:");
        var pdfReport = new PdfReportGenerator();
        pdfReport.GenerateReport();
        
        Console.WriteLine("2. Gerando relat√≥rio Excel:");
        var excelReport = new ExcelReportGenerator();
        excelReport.GenerateReport();
        
        Console.WriteLine("3. Gerando relat√≥rio HTML:");
        var htmlReport = new HtmlReportGenerator();
        htmlReport.GenerateReport();
        
        Console.WriteLine("=== An√°lise do Template Method ===");
        Console.WriteLine("\nüîß Estrutura do algoritmo (sempre a mesma):");
        Console.WriteLine("   1. Generate Header");
        Console.WriteLine("   2. Collect Data");
        Console.WriteLine("   3. Process Data");
        Console.WriteLine("   4. Format Report");
        Console.WriteLine("   5. Export Report (varia por formato)");
        Console.WriteLine("   6. Generate Footer");
        
        Console.WriteLine("\n‚úÖ Vantagens do Template Method:");
        Console.WriteLine("   ‚Ä¢ Define esqueleto do algoritmo na classe base");
        Console.WriteLine("   ‚Ä¢ Subclasses implementam apenas partes espec√≠ficas");
        Console.WriteLine("   ‚Ä¢ Elimina duplica√ß√£o de c√≥digo");
        Console.WriteLine("   ‚Ä¢ Garante que algoritmo seja seguido");
        Console.WriteLine("   ‚Ä¢ Facilita manuten√ß√£o e extens√£o");
        
        Console.WriteLine("\nüéØ M√©todos do Template Method:");
        Console.WriteLine("   ‚Ä¢ Template Method: GenerateReport() - n√£o deve ser sobrescrito");
        Console.WriteLine("   ‚Ä¢ M√©todos concretos: t√™m implementa√ß√£o padr√£o");
        Console.WriteLine("   ‚Ä¢ M√©todos abstratos: devem ser implementados");
        Console.WriteLine("   ‚Ä¢ Hook methods: podem ser sobrescritos opcionalmente");
    }
}
